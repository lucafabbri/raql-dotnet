//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/github/raql-dotnet/Grammar/RAQL.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

/// <summary>
/// The raql parser class
/// </summary>
/// <seealso cref="Parser"/>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class RAQLParser : Parser {
	/// <summary>
	/// The decision to dfa
	/// </summary>
	protected static DFA[] decisionToDFA;
	/// <summary>
	/// The prediction context cache
	/// </summary>
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	/// <summary>
	/// The null
	/// </summary>
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, IN=7, BASE_OPERATOR=8, 
		STRING_OPERATOR=9, NUMBER_OPERATOR=10, CONJUNCTIONS=11, NUMBER=12, WORD=13, 
		STRING=14, BOOLEAN=15, NULL=16;
	/// <summary>
	/// The rule bool array
	/// </summary>
	public const int
		RULE_raql = 0, RULE_clause = 1, RULE_conjunction = 2, RULE_operation = 3, 
		RULE_string_array_operation = 4, RULE_number_array_operation = 5, RULE_bool_array_operation = 6, 
		RULE_array_operator = 7, RULE_string_operation = 8, RULE_string_operator = 9, 
		RULE_number_operation = 10, RULE_number_operator = 11, RULE_bool_operation = 12, 
		RULE_bool_operator = 13, RULE_field = 14, RULE_nullstring = 15, RULE_string = 16, 
		RULE_string_array = 17, RULE_number = 18, RULE_number_array = 19, RULE_bool = 20, 
		RULE_bool_array = 21;
	/// <summary>
	/// The rule names
	/// </summary>
	public static readonly string[] ruleNames = {
		"raql", "clause", "conjunction", "operation", "string_array_operation", 
		"number_array_operation", "bool_array_operation", "array_operator", "string_operation", 
		"string_operator", "number_operation", "number_operator", "bool_operation", 
		"bool_operator", "field", "nullstring", "string", "string_array", "number", 
		"number_array", "bool", "bool_array"
	};

	/// <summary>
	/// The literal names
	/// </summary>
	private static readonly string[] _LiteralNames = {
		null, "'('", "' '", "')'", "'['", "','", "']'", null, null, null, null, 
		null, null, null, null, null, "'null'"
	};
	/// <summary>
	/// The symbolic names
	/// </summary>
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, "IN", "BASE_OPERATOR", "STRING_OPERATOR", 
		"NUMBER_OPERATOR", "CONJUNCTIONS", "NUMBER", "WORD", "STRING", "BOOLEAN", 
		"NULL"
	};
	/// <summary>
	/// The symbolic names
	/// </summary>
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	/// <summary>
	/// Gets the value of the vocabulary
	/// </summary>
	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	/// <summary>
	/// Gets the value of the grammar file name
	/// </summary>
	public override string GrammarFileName { get { return "RAQL.g4"; } }

	/// <summary>
	/// Gets the value of the rule names
	/// </summary>
	public override string[] RuleNames { get { return ruleNames; } }

	/// <summary>
	/// Gets the value of the serialized atn
	/// </summary>
	public override int[] SerializedAtn { get { return _serializedATN; } }

	/// <summary>
	/// Initializes a new instance of the <see cref="RAQLParser"/> class
	/// </summary>
	static RAQLParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		/// <summary>
		/// Initializes a new instance of the <see cref="RAQLParser"/> class
		/// </summary>
		/// <param name="input">The input</param>
		public RAQLParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		/// <summary>
		/// Initializes a new instance of the <see cref="RAQLParser"/> class
		/// </summary>
		/// <param name="input">The input</param>
		/// <param name="output">The output</param>
		/// <param name="errorOutput">The error output</param>
		public RAQLParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	/// <summary>
	/// The raql context class
	/// </summary>
	/// <seealso cref="ParserRuleContext"/>
	public partial class RaqlContext : ParserRuleContext {
		/// <summary>
		/// Clauses this instance
		/// </summary>
		/// <returns>The clause context</returns>
		[System.Diagnostics.DebuggerNonUserCode] public ClauseContext clause() {
			return GetRuleContext<ClauseContext>(0);
		}
		/// <summary>
		/// Eofs this instance
		/// </summary>
		/// <returns>The terminal node</returns>
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(RAQLParser.Eof, 0); }
		/// <summary>
		/// Initializes a new instance of the <see cref="RaqlContext"/> class
		/// </summary>
		/// <param name="parent">The parent</param>
		/// <param name="invokingState">The invoking state</param>
		public RaqlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		/// <summary>
		/// Gets the value of the rule index
		/// </summary>
		public override int RuleIndex { get { return RULE_raql; } }
		/// <summary>
		/// Accepts the visitor
		/// </summary>
		/// <typeparam name="TResult">The result</typeparam>
		/// <param name="visitor">The visitor</param>
		/// <returns>The result</returns>
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAQLVisitor<TResult> typedVisitor = visitor as IRAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRaql(this);
			else return visitor.VisitChildren(this);
		}
	}

	/// <summary>
	/// Raqls this instance
	/// </summary>
	/// <returns>The localctx</returns>
	[RuleVersion(0)]
	public RaqlContext raql() {
		RaqlContext _localctx = new RaqlContext(Context, State);
		EnterRule(_localctx, 0, RULE_raql);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44;
			clause(0);
			State = 45;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	/// <summary>
	/// The clause context class
	/// </summary>
	/// <seealso cref="ParserRuleContext"/>
	public partial class ClauseContext : ParserRuleContext {
		/// <summary>
		/// Operations this instance
		/// </summary>
		/// <returns>The operation context</returns>
		[System.Diagnostics.DebuggerNonUserCode] public OperationContext operation() {
			return GetRuleContext<OperationContext>(0);
		}
		/// <summary>
		/// Clauses this instance
		/// </summary>
		/// <returns>The clause context array</returns>
		[System.Diagnostics.DebuggerNonUserCode] public ClauseContext[] clause() {
			return GetRuleContexts<ClauseContext>();
		}
		/// <summary>
		/// Clauses the i
		/// </summary>
		/// <param name="i">The </param>
		/// <returns>The clause context</returns>
		[System.Diagnostics.DebuggerNonUserCode] public ClauseContext clause(int i) {
			return GetRuleContext<ClauseContext>(i);
		}
		/// <summary>
		/// Conjunctions this instance
		/// </summary>
		/// <returns>The conjunction context</returns>
		[System.Diagnostics.DebuggerNonUserCode] public ConjunctionContext conjunction() {
			return GetRuleContext<ConjunctionContext>(0);
		}
		/// <summary>
		/// Initializes a new instance of the <see cref="ClauseContext"/> class
		/// </summary>
		/// <param name="parent">The parent</param>
		/// <param name="invokingState">The invoking state</param>
		public ClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		/// <summary>
		/// Gets the value of the rule index
		/// </summary>
		public override int RuleIndex { get { return RULE_clause; } }
		/// <summary>
		/// Accepts the visitor
		/// </summary>
		/// <typeparam name="TResult">The result</typeparam>
		/// <param name="visitor">The visitor</param>
		/// <returns>The result</returns>
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAQLVisitor<TResult> typedVisitor = visitor as IRAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	/// <summary>
	/// Clauses this instance
	/// </summary>
	/// <returns>The clause context</returns>
	[RuleVersion(0)]
	public ClauseContext clause() {
		return clause(0);
	}

	/// <summary>
	/// Clauses the  p
	/// </summary>
	/// <param name="_p">The </param>
	/// <exception cref="NoViableAltException"></exception>
	/// <exception cref="FailedPredicateException">Precpred(Context, 1)</exception>
	/// <returns>The localctx</returns>
	private ClauseContext clause(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ClauseContext _localctx = new ClauseContext(Context, _parentState);
		ClauseContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_clause, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 59;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IN:
			case BASE_OPERATOR:
			case STRING_OPERATOR:
			case NUMBER_OPERATOR:
			case WORD:
				{
				State = 48;
				operation();
				}
				break;
			case T__0:
				{
				State = 49;
				Match(T__0);
				State = 51;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__1) {
					{
					State = 50;
					Match(T__1);
					}
				}

				State = 53;
				clause(0);
				State = 55;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__1) {
					{
					State = 54;
					Match(T__1);
					}
				}

				State = 57;
				Match(T__2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 67;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ClauseContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_clause);
					State = 61;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 62;
					conjunction();
					State = 63;
					clause(2);
					}
					} 
				}
				State = 69;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	/// <summary>
	/// The conjunction context class
	/// </summary>
	/// <seealso cref="ParserRuleContext"/>
	public partial class ConjunctionContext : ParserRuleContext {
		/// <summary>
		/// Conjunctionses this instance
		/// </summary>
		/// <returns>The terminal node</returns>
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONJUNCTIONS() { return GetToken(RAQLParser.CONJUNCTIONS, 0); }
		/// <summary>
		/// Initializes a new instance of the <see cref="ConjunctionContext"/> class
		/// </summary>
		/// <param name="parent">The parent</param>
		/// <param name="invokingState">The invoking state</param>
		public ConjunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		/// <summary>
		/// Gets the value of the rule index
		/// </summary>
		public override int RuleIndex { get { return RULE_conjunction; } }
		/// <summary>
		/// Accepts the visitor
		/// </summary>
		/// <typeparam name="TResult">The result</typeparam>
		/// <param name="visitor">The visitor</param>
		/// <returns>The result</returns>
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAQLVisitor<TResult> typedVisitor = visitor as IRAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConjunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	/// <summary>
	/// Conjunctions this instance
	/// </summary>
	/// <returns>The localctx</returns>
	[RuleVersion(0)]
	public ConjunctionContext conjunction() {
		ConjunctionContext _localctx = new ConjunctionContext(Context, State);
		EnterRule(_localctx, 4, RULE_conjunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70;
			Match(CONJUNCTIONS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	/// <summary>
	/// The operation context class
	/// </summary>
	/// <seealso cref="ParserRuleContext"/>
	public partial class OperationContext : ParserRuleContext {
		/// <summary>
		/// Bools the array operation
		/// </summary>
		/// <returns>The bool array operation context</returns>
		[System.Diagnostics.DebuggerNonUserCode] public Bool_array_operationContext bool_array_operation() {
			return GetRuleContext<Bool_array_operationContext>(0);
		}
		/// <summary>
		/// Numbers the array operation
		/// </summary>
		/// <returns>The number array operation context</returns>
		[System.Diagnostics.DebuggerNonUserCode] public Number_array_operationContext number_array_operation() {
			return GetRuleContext<Number_array_operationContext>(0);
		}
		/// <summary>
		/// Strings the array operation
		/// </summary>
		/// <returns>The string array operation context</returns>
		[System.Diagnostics.DebuggerNonUserCode] public String_array_operationContext string_array_operation() {
			return GetRuleContext<String_array_operationContext>(0);
		}
		/// <summary>
		/// Bools the operation
		/// </summary>
		/// <returns>The bool operation context</returns>
		[System.Diagnostics.DebuggerNonUserCode] public Bool_operationContext bool_operation() {
			return GetRuleContext<Bool_operationContext>(0);
		}
		/// <summary>
		/// Numbers the operation
		/// </summary>
		/// <returns>The number operation context</returns>
		[System.Diagnostics.DebuggerNonUserCode] public Number_operationContext number_operation() {
			return GetRuleContext<Number_operationContext>(0);
		}
		/// <summary>
		/// Strings the operation
		/// </summary>
		/// <returns>The string operation context</returns>
		[System.Diagnostics.DebuggerNonUserCode] public String_operationContext string_operation() {
			return GetRuleContext<String_operationContext>(0);
		}
		/// <summary>
		/// Initializes a new instance of the <see cref="OperationContext"/> class
		/// </summary>
		/// <param name="parent">The parent</param>
		/// <param name="invokingState">The invoking state</param>
		public OperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		/// <summary>
		/// Gets the value of the rule index
		/// </summary>
		public override int RuleIndex { get { return RULE_operation; } }
		/// <summary>
		/// Accepts the visitor
		/// </summary>
		/// <typeparam name="TResult">The result</typeparam>
		/// <param name="visitor">The visitor</param>
		/// <returns>The result</returns>
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAQLVisitor<TResult> typedVisitor = visitor as IRAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	/// <summary>
	/// Operations this instance
	/// </summary>
	/// <returns>The localctx</returns>
	[RuleVersion(0)]
	public OperationContext operation() {
		OperationContext _localctx = new OperationContext(Context, State);
		EnterRule(_localctx, 6, RULE_operation);
		try {
			State = 78;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 72;
				bool_array_operation();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 73;
				number_array_operation();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 74;
				string_array_operation();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 75;
				bool_operation();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 76;
				number_operation();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 77;
				string_operation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	/// <summary>
	/// The string array operationcontext class
	/// </summary>
	/// <seealso cref="ParserRuleContext"/>
	public partial class String_array_operationContext : ParserRuleContext {
		/// <summary>
		/// Fields this instance
		/// </summary>
		/// <returns>The field context</returns>
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		/// <summary>
		/// Arrays the operator
		/// </summary>
		/// <returns>The array operator context</returns>
		[System.Diagnostics.DebuggerNonUserCode] public Array_operatorContext array_operator() {
			return GetRuleContext<Array_operatorContext>(0);
		}
		/// <summary>
		/// Strings the array
		/// </summary>
		/// <returns>The string array context</returns>
		[System.Diagnostics.DebuggerNonUserCode] public String_arrayContext string_array() {
			return GetRuleContext<String_arrayContext>(0);
		}
		/// <summary>
		/// Initializes a new instance of the <see cref="String_array_operationContext"/> class
		/// </summary>
		/// <param name="parent">The parent</param>
		/// <param name="invokingState">The invoking state</param>
		public String_array_operationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		/// <summary>
		/// Gets the value of the rule index
		/// </summary>
		public override int RuleIndex { get { return RULE_string_array_operation; } }
		/// <summary>
		/// Accepts the visitor
		/// </summary>
		/// <typeparam name="TResult">The result</typeparam>
		/// <param name="visitor">The visitor</param>
		/// <returns>The result</returns>
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAQLVisitor<TResult> typedVisitor = visitor as IRAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_array_operation(this);
			else return visitor.VisitChildren(this);
		}
	}

	/// <summary>
	/// Strings the array operation
	/// </summary>
	/// <returns>The localctx</returns>
	[RuleVersion(0)]
	public String_array_operationContext string_array_operation() {
		String_array_operationContext _localctx = new String_array_operationContext(Context, State);
		EnterRule(_localctx, 8, RULE_string_array_operation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80;
			field();
			State = 81;
			array_operator();
			State = 82;
			string_array();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	/// <summary>
	/// The number array operationcontext class
	/// </summary>
	/// <seealso cref="ParserRuleContext"/>
	public partial class Number_array_operationContext : ParserRuleContext {
		/// <summary>
		/// Fields this instance
		/// </summary>
		/// <returns>The field context</returns>
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		/// <summary>
		/// Arrays the operator
		/// </summary>
		/// <returns>The array operator context</returns>
		[System.Diagnostics.DebuggerNonUserCode] public Array_operatorContext array_operator() {
			return GetRuleContext<Array_operatorContext>(0);
		}
		/// <summary>
		/// Numbers the array
		/// </summary>
		/// <returns>The number array context</returns>
		[System.Diagnostics.DebuggerNonUserCode] public Number_arrayContext number_array() {
			return GetRuleContext<Number_arrayContext>(0);
		}
		/// <summary>
		/// Initializes a new instance of the <see cref="Number_array_operationContext"/> class
		/// </summary>
		/// <param name="parent">The parent</param>
		/// <param name="invokingState">The invoking state</param>
		public Number_array_operationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		/// <summary>
		/// Gets the value of the rule index
		/// </summary>
		public override int RuleIndex { get { return RULE_number_array_operation; } }
		/// <summary>
		/// Accepts the visitor
		/// </summary>
		/// <typeparam name="TResult">The result</typeparam>
		/// <param name="visitor">The visitor</param>
		/// <returns>The result</returns>
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAQLVisitor<TResult> typedVisitor = visitor as IRAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber_array_operation(this);
			else return visitor.VisitChildren(this);
		}
	}

	/// <summary>
	/// Numbers the array operation
	/// </summary>
	/// <returns>The localctx</returns>
	[RuleVersion(0)]
	public Number_array_operationContext number_array_operation() {
		Number_array_operationContext _localctx = new Number_array_operationContext(Context, State);
		EnterRule(_localctx, 10, RULE_number_array_operation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			field();
			State = 85;
			array_operator();
			State = 86;
			number_array();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	/// <summary>
	/// The bool array operationcontext class
	/// </summary>
	/// <seealso cref="ParserRuleContext"/>
	public partial class Bool_array_operationContext : ParserRuleContext {
		/// <summary>
		/// Fields this instance
		/// </summary>
		/// <returns>The field context</returns>
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		/// <summary>
		/// Arrays the operator
		/// </summary>
		/// <returns>The array operator context</returns>
		[System.Diagnostics.DebuggerNonUserCode] public Array_operatorContext array_operator() {
			return GetRuleContext<Array_operatorContext>(0);
		}
		/// <summary>
		/// Bools the array
		/// </summary>
		/// <returns>The bool array context</returns>
		[System.Diagnostics.DebuggerNonUserCode] public Bool_arrayContext bool_array() {
			return GetRuleContext<Bool_arrayContext>(0);
		}
		/// <summary>
		/// Initializes a new instance of the <see cref="Bool_array_operationContext"/> class
		/// </summary>
		/// <param name="parent">The parent</param>
		/// <param name="invokingState">The invoking state</param>
		public Bool_array_operationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		/// <summary>
		/// Gets the value of the rule index
		/// </summary>
		public override int RuleIndex { get { return RULE_bool_array_operation; } }
		/// <summary>
		/// Accepts the visitor
		/// </summary>
		/// <typeparam name="TResult">The result</typeparam>
		/// <param name="visitor">The visitor</param>
		/// <returns>The result</returns>
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAQLVisitor<TResult> typedVisitor = visitor as IRAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool_array_operation(this);
			else return visitor.VisitChildren(this);
		}
	}

	/// <summary>
	/// Bools the array operation
	/// </summary>
	/// <returns>The localctx</returns>
	[RuleVersion(0)]
	public Bool_array_operationContext bool_array_operation() {
		Bool_array_operationContext _localctx = new Bool_array_operationContext(Context, State);
		EnterRule(_localctx, 12, RULE_bool_array_operation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88;
			field();
			State = 89;
			array_operator();
			State = 90;
			bool_array();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	/// <summary>
	/// The array operatorcontext class
	/// </summary>
	/// <seealso cref="ParserRuleContext"/>
	public partial class Array_operatorContext : ParserRuleContext {
		/// <summary>
		/// Ins this instance
		/// </summary>
		/// <returns>The terminal node</returns>
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(RAQLParser.IN, 0); }
		/// <summary>
		/// Initializes a new instance of the <see cref="Array_operatorContext"/> class
		/// </summary>
		/// <param name="parent">The parent</param>
		/// <param name="invokingState">The invoking state</param>
		public Array_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		/// <summary>
		/// Gets the value of the rule index
		/// </summary>
		public override int RuleIndex { get { return RULE_array_operator; } }
		/// <summary>
		/// Accepts the visitor
		/// </summary>
		/// <typeparam name="TResult">The result</typeparam>
		/// <param name="visitor">The visitor</param>
		/// <returns>The result</returns>
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAQLVisitor<TResult> typedVisitor = visitor as IRAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	/// <summary>
	/// Arrays the operator
	/// </summary>
	/// <returns>The localctx</returns>
	[RuleVersion(0)]
	public Array_operatorContext array_operator() {
		Array_operatorContext _localctx = new Array_operatorContext(Context, State);
		EnterRule(_localctx, 14, RULE_array_operator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92;
			Match(IN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	/// <summary>
	/// The string operationcontext class
	/// </summary>
	/// <seealso cref="ParserRuleContext"/>
	public partial class String_operationContext : ParserRuleContext {
		/// <summary>
		/// Fields this instance
		/// </summary>
		/// <returns>The field context</returns>
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		/// <summary>
		/// Strings the operator
		/// </summary>
		/// <returns>The string operator context</returns>
		[System.Diagnostics.DebuggerNonUserCode] public String_operatorContext string_operator() {
			return GetRuleContext<String_operatorContext>(0);
		}
		/// <summary>
		/// Strings this instance
		/// </summary>
		/// <returns>The string context</returns>
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		/// <summary>
		/// Nullstrings this instance
		/// </summary>
		/// <returns>The nullstring context</returns>
		[System.Diagnostics.DebuggerNonUserCode] public NullstringContext nullstring() {
			return GetRuleContext<NullstringContext>(0);
		}
		/// <summary>
		/// Initializes a new instance of the <see cref="String_operationContext"/> class
		/// </summary>
		/// <param name="parent">The parent</param>
		/// <param name="invokingState">The invoking state</param>
		public String_operationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		/// <summary>
		/// Gets the value of the rule index
		/// </summary>
		public override int RuleIndex { get { return RULE_string_operation; } }
		/// <summary>
		/// Accepts the visitor
		/// </summary>
		/// <typeparam name="TResult">The result</typeparam>
		/// <param name="visitor">The visitor</param>
		/// <returns>The result</returns>
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAQLVisitor<TResult> typedVisitor = visitor as IRAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_operation(this);
			else return visitor.VisitChildren(this);
		}
	}

	/// <summary>
	/// Strings the operation
	/// </summary>
	/// <exception cref="NoViableAltException"></exception>
	/// <returns>The localctx</returns>
	[RuleVersion(0)]
	public String_operationContext string_operation() {
		String_operationContext _localctx = new String_operationContext(Context, State);
		EnterRule(_localctx, 16, RULE_string_operation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94;
			field();
			State = 95;
			string_operator();
			State = 98;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
				{
				State = 96;
				@string();
				}
				break;
			case NULL:
				{
				State = 97;
				nullstring();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	/// <summary>
	/// The string operatorcontext class
	/// </summary>
	/// <seealso cref="ParserRuleContext"/>
	public partial class String_operatorContext : ParserRuleContext {
		/// <summary>
		/// Bases the operator
		/// </summary>
		/// <returns>The terminal node</returns>
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BASE_OPERATOR() { return GetToken(RAQLParser.BASE_OPERATOR, 0); }
		/// <summary>
		/// Strings the operator
		/// </summary>
		/// <returns>The terminal node</returns>
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_OPERATOR() { return GetToken(RAQLParser.STRING_OPERATOR, 0); }
		/// <summary>
		/// Initializes a new instance of the <see cref="String_operatorContext"/> class
		/// </summary>
		/// <param name="parent">The parent</param>
		/// <param name="invokingState">The invoking state</param>
		public String_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		/// <summary>
		/// Gets the value of the rule index
		/// </summary>
		public override int RuleIndex { get { return RULE_string_operator; } }
		/// <summary>
		/// Accepts the visitor
		/// </summary>
		/// <typeparam name="TResult">The result</typeparam>
		/// <param name="visitor">The visitor</param>
		/// <returns>The result</returns>
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAQLVisitor<TResult> typedVisitor = visitor as IRAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	/// <summary>
	/// Strings the operator
	/// </summary>
	/// <returns>The localctx</returns>
	[RuleVersion(0)]
	public String_operatorContext string_operator() {
		String_operatorContext _localctx = new String_operatorContext(Context, State);
		EnterRule(_localctx, 18, RULE_string_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			_la = TokenStream.LA(1);
			if ( !(_la==BASE_OPERATOR || _la==STRING_OPERATOR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	/// <summary>
	/// The number operationcontext class
	/// </summary>
	/// <seealso cref="ParserRuleContext"/>
	public partial class Number_operationContext : ParserRuleContext {
		/// <summary>
		/// Fields this instance
		/// </summary>
		/// <returns>The field context</returns>
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		/// <summary>
		/// Numbers the operator
		/// </summary>
		/// <returns>The number operator context</returns>
		[System.Diagnostics.DebuggerNonUserCode] public Number_operatorContext number_operator() {
			return GetRuleContext<Number_operatorContext>(0);
		}
		/// <summary>
		/// Numbers this instance
		/// </summary>
		/// <returns>The number context</returns>
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		/// <summary>
		/// Initializes a new instance of the <see cref="Number_operationContext"/> class
		/// </summary>
		/// <param name="parent">The parent</param>
		/// <param name="invokingState">The invoking state</param>
		public Number_operationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		/// <summary>
		/// Gets the value of the rule index
		/// </summary>
		public override int RuleIndex { get { return RULE_number_operation; } }
		/// <summary>
		/// Accepts the visitor
		/// </summary>
		/// <typeparam name="TResult">The result</typeparam>
		/// <param name="visitor">The visitor</param>
		/// <returns>The result</returns>
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAQLVisitor<TResult> typedVisitor = visitor as IRAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber_operation(this);
			else return visitor.VisitChildren(this);
		}
	}

	/// <summary>
	/// Numbers the operation
	/// </summary>
	/// <returns>The localctx</returns>
	[RuleVersion(0)]
	public Number_operationContext number_operation() {
		Number_operationContext _localctx = new Number_operationContext(Context, State);
		EnterRule(_localctx, 20, RULE_number_operation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102;
			field();
			State = 103;
			number_operator();
			State = 104;
			number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	/// <summary>
	/// The number operatorcontext class
	/// </summary>
	/// <seealso cref="ParserRuleContext"/>
	public partial class Number_operatorContext : ParserRuleContext {
		/// <summary>
		/// Bases the operator
		/// </summary>
		/// <returns>The terminal node</returns>
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BASE_OPERATOR() { return GetToken(RAQLParser.BASE_OPERATOR, 0); }
		/// <summary>
		/// Numbers the operator
		/// </summary>
		/// <returns>The terminal node</returns>
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER_OPERATOR() { return GetToken(RAQLParser.NUMBER_OPERATOR, 0); }
		/// <summary>
		/// Initializes a new instance of the <see cref="Number_operatorContext"/> class
		/// </summary>
		/// <param name="parent">The parent</param>
		/// <param name="invokingState">The invoking state</param>
		public Number_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		/// <summary>
		/// Gets the value of the rule index
		/// </summary>
		public override int RuleIndex { get { return RULE_number_operator; } }
		/// <summary>
		/// Accepts the visitor
		/// </summary>
		/// <typeparam name="TResult">The result</typeparam>
		/// <param name="visitor">The visitor</param>
		/// <returns>The result</returns>
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAQLVisitor<TResult> typedVisitor = visitor as IRAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	/// <summary>
	/// Numbers the operator
	/// </summary>
	/// <returns>The localctx</returns>
	[RuleVersion(0)]
	public Number_operatorContext number_operator() {
		Number_operatorContext _localctx = new Number_operatorContext(Context, State);
		EnterRule(_localctx, 22, RULE_number_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106;
			_la = TokenStream.LA(1);
			if ( !(_la==BASE_OPERATOR || _la==NUMBER_OPERATOR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	/// <summary>
	/// The bool operationcontext class
	/// </summary>
	/// <seealso cref="ParserRuleContext"/>
	public partial class Bool_operationContext : ParserRuleContext {
		/// <summary>
		/// Fields this instance
		/// </summary>
		/// <returns>The field context</returns>
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		/// <summary>
		/// Bools the operator
		/// </summary>
		/// <returns>The bool operator context</returns>
		[System.Diagnostics.DebuggerNonUserCode] public Bool_operatorContext bool_operator() {
			return GetRuleContext<Bool_operatorContext>(0);
		}
		/// <summary>
		/// Bools this instance
		/// </summary>
		/// <returns>The bool context</returns>
		[System.Diagnostics.DebuggerNonUserCode] public BoolContext @bool() {
			return GetRuleContext<BoolContext>(0);
		}
		/// <summary>
		/// Initializes a new instance of the <see cref="Bool_operationContext"/> class
		/// </summary>
		/// <param name="parent">The parent</param>
		/// <param name="invokingState">The invoking state</param>
		public Bool_operationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		/// <summary>
		/// Gets the value of the rule index
		/// </summary>
		public override int RuleIndex { get { return RULE_bool_operation; } }
		/// <summary>
		/// Accepts the visitor
		/// </summary>
		/// <typeparam name="TResult">The result</typeparam>
		/// <param name="visitor">The visitor</param>
		/// <returns>The result</returns>
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAQLVisitor<TResult> typedVisitor = visitor as IRAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool_operation(this);
			else return visitor.VisitChildren(this);
		}
	}

	/// <summary>
	/// Bools the operation
	/// </summary>
	/// <returns>The localctx</returns>
	[RuleVersion(0)]
	public Bool_operationContext bool_operation() {
		Bool_operationContext _localctx = new Bool_operationContext(Context, State);
		EnterRule(_localctx, 24, RULE_bool_operation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108;
			field();
			State = 109;
			bool_operator();
			State = 110;
			@bool();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	/// <summary>
	/// The bool operatorcontext class
	/// </summary>
	/// <seealso cref="ParserRuleContext"/>
	public partial class Bool_operatorContext : ParserRuleContext {
		/// <summary>
		/// Bases the operator
		/// </summary>
		/// <returns>The terminal node</returns>
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BASE_OPERATOR() { return GetToken(RAQLParser.BASE_OPERATOR, 0); }
		/// <summary>
		/// Initializes a new instance of the <see cref="Bool_operatorContext"/> class
		/// </summary>
		/// <param name="parent">The parent</param>
		/// <param name="invokingState">The invoking state</param>
		public Bool_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		/// <summary>
		/// Gets the value of the rule index
		/// </summary>
		public override int RuleIndex { get { return RULE_bool_operator; } }
		/// <summary>
		/// Accepts the visitor
		/// </summary>
		/// <typeparam name="TResult">The result</typeparam>
		/// <param name="visitor">The visitor</param>
		/// <returns>The result</returns>
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAQLVisitor<TResult> typedVisitor = visitor as IRAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	/// <summary>
	/// Bools the operator
	/// </summary>
	/// <returns>The localctx</returns>
	[RuleVersion(0)]
	public Bool_operatorContext bool_operator() {
		Bool_operatorContext _localctx = new Bool_operatorContext(Context, State);
		EnterRule(_localctx, 26, RULE_bool_operator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112;
			Match(BASE_OPERATOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	/// <summary>
	/// The field context class
	/// </summary>
	/// <seealso cref="ParserRuleContext"/>
	public partial class FieldContext : ParserRuleContext {
		/// <summary>
		/// Words this instance
		/// </summary>
		/// <returns>The terminal node array</returns>
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WORD() { return GetTokens(RAQLParser.WORD); }
		/// <summary>
		/// Words the i
		/// </summary>
		/// <param name="i">The </param>
		/// <returns>The terminal node</returns>
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD(int i) {
			return GetToken(RAQLParser.WORD, i);
		}
		/// <summary>
		/// Initializes a new instance of the <see cref="FieldContext"/> class
		/// </summary>
		/// <param name="parent">The parent</param>
		/// <param name="invokingState">The invoking state</param>
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		/// <summary>
		/// Gets the value of the rule index
		/// </summary>
		public override int RuleIndex { get { return RULE_field; } }
		/// <summary>
		/// Accepts the visitor
		/// </summary>
		/// <typeparam name="TResult">The result</typeparam>
		/// <param name="visitor">The visitor</param>
		/// <returns>The result</returns>
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAQLVisitor<TResult> typedVisitor = visitor as IRAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField(this);
			else return visitor.VisitChildren(this);
		}
	}

	/// <summary>
	/// Fields this instance
	/// </summary>
	/// <returns>The localctx</returns>
	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(Context, State);
		EnterRule(_localctx, 28, RULE_field);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WORD) {
				{
				{
				State = 114;
				Match(WORD);
				}
				}
				State = 119;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	/// <summary>
	/// The nullstring context class
	/// </summary>
	/// <seealso cref="ParserRuleContext"/>
	public partial class NullstringContext : ParserRuleContext {
		/// <summary>
		/// Nulls this instance
		/// </summary>
		/// <returns>The terminal node</returns>
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(RAQLParser.NULL, 0); }
		/// <summary>
		/// Initializes a new instance of the <see cref="NullstringContext"/> class
		/// </summary>
		/// <param name="parent">The parent</param>
		/// <param name="invokingState">The invoking state</param>
		public NullstringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		/// <summary>
		/// Gets the value of the rule index
		/// </summary>
		public override int RuleIndex { get { return RULE_nullstring; } }
		/// <summary>
		/// Accepts the visitor
		/// </summary>
		/// <typeparam name="TResult">The result</typeparam>
		/// <param name="visitor">The visitor</param>
		/// <returns>The result</returns>
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAQLVisitor<TResult> typedVisitor = visitor as IRAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullstring(this);
			else return visitor.VisitChildren(this);
		}
	}

	/// <summary>
	/// Nullstrings this instance
	/// </summary>
	/// <returns>The localctx</returns>
	[RuleVersion(0)]
	public NullstringContext nullstring() {
		NullstringContext _localctx = new NullstringContext(Context, State);
		EnterRule(_localctx, 30, RULE_nullstring);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			Match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	/// <summary>
	/// The string context class
	/// </summary>
	/// <seealso cref="ParserRuleContext"/>
	public partial class StringContext : ParserRuleContext {
		/// <summary>
		/// Strings this instance
		/// </summary>
		/// <returns>The terminal node</returns>
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(RAQLParser.STRING, 0); }
		/// <summary>
		/// Initializes a new instance of the <see cref="StringContext"/> class
		/// </summary>
		/// <param name="parent">The parent</param>
		/// <param name="invokingState">The invoking state</param>
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		/// <summary>
		/// Gets the value of the rule index
		/// </summary>
		public override int RuleIndex { get { return RULE_string; } }
		/// <summary>
		/// Accepts the visitor
		/// </summary>
		/// <typeparam name="TResult">The result</typeparam>
		/// <param name="visitor">The visitor</param>
		/// <returns>The result</returns>
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAQLVisitor<TResult> typedVisitor = visitor as IRAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	/// <summary>
	/// Strings this instance
	/// </summary>
	/// <returns>The localctx</returns>
	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 32, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	/// <summary>
	/// The string arraycontext class
	/// </summary>
	/// <seealso cref="ParserRuleContext"/>
	public partial class String_arrayContext : ParserRuleContext {
		/// <summary>
		/// Strings this instance
		/// </summary>
		/// <returns>The string context array</returns>
		[System.Diagnostics.DebuggerNonUserCode] public StringContext[] @string() {
			return GetRuleContexts<StringContext>();
		}
		/// <summary>
		/// Strings the i
		/// </summary>
		/// <param name="i">The </param>
		/// <returns>The string context</returns>
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string(int i) {
			return GetRuleContext<StringContext>(i);
		}
		/// <summary>
		/// Initializes a new instance of the <see cref="String_arrayContext"/> class
		/// </summary>
		/// <param name="parent">The parent</param>
		/// <param name="invokingState">The invoking state</param>
		public String_arrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		/// <summary>
		/// Gets the value of the rule index
		/// </summary>
		public override int RuleIndex { get { return RULE_string_array; } }
		/// <summary>
		/// Accepts the visitor
		/// </summary>
		/// <typeparam name="TResult">The result</typeparam>
		/// <param name="visitor">The visitor</param>
		/// <returns>The result</returns>
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAQLVisitor<TResult> typedVisitor = visitor as IRAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_array(this);
			else return visitor.VisitChildren(this);
		}
	}

	/// <summary>
	/// Strings the array
	/// </summary>
	/// <returns>The localctx</returns>
	[RuleVersion(0)]
	public String_arrayContext string_array() {
		String_arrayContext _localctx = new String_arrayContext(Context, State);
		EnterRule(_localctx, 34, RULE_string_array);
		int _la;
		try {
			State = 137;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 124;
				Match(T__3);
				State = 125;
				@string();
				State = 130;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__4) {
					{
					{
					State = 126;
					Match(T__4);
					State = 127;
					@string();
					}
					}
					State = 132;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 133;
				Match(T__5);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 135;
				Match(T__3);
				State = 136;
				Match(T__5);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	/// <summary>
	/// The number context class
	/// </summary>
	/// <seealso cref="ParserRuleContext"/>
	public partial class NumberContext : ParserRuleContext {
		/// <summary>
		/// Numbers this instance
		/// </summary>
		/// <returns>The terminal node</returns>
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(RAQLParser.NUMBER, 0); }
		/// <summary>
		/// Initializes a new instance of the <see cref="NumberContext"/> class
		/// </summary>
		/// <param name="parent">The parent</param>
		/// <param name="invokingState">The invoking state</param>
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		/// <summary>
		/// Gets the value of the rule index
		/// </summary>
		public override int RuleIndex { get { return RULE_number; } }
		/// <summary>
		/// Accepts the visitor
		/// </summary>
		/// <typeparam name="TResult">The result</typeparam>
		/// <param name="visitor">The visitor</param>
		/// <returns>The result</returns>
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAQLVisitor<TResult> typedVisitor = visitor as IRAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	/// <summary>
	/// Numbers this instance
	/// </summary>
	/// <returns>The localctx</returns>
	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 36, RULE_number);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139;
			Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	/// <summary>
	/// The number arraycontext class
	/// </summary>
	/// <seealso cref="ParserRuleContext"/>
	public partial class Number_arrayContext : ParserRuleContext {
		/// <summary>
		/// Numbers this instance
		/// </summary>
		/// <returns>The number context array</returns>
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext[] number() {
			return GetRuleContexts<NumberContext>();
		}
		/// <summary>
		/// Numbers the i
		/// </summary>
		/// <param name="i">The </param>
		/// <returns>The number context</returns>
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number(int i) {
			return GetRuleContext<NumberContext>(i);
		}
		/// <summary>
		/// Initializes a new instance of the <see cref="Number_arrayContext"/> class
		/// </summary>
		/// <param name="parent">The parent</param>
		/// <param name="invokingState">The invoking state</param>
		public Number_arrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		/// <summary>
		/// Gets the value of the rule index
		/// </summary>
		public override int RuleIndex { get { return RULE_number_array; } }
		/// <summary>
		/// Accepts the visitor
		/// </summary>
		/// <typeparam name="TResult">The result</typeparam>
		/// <param name="visitor">The visitor</param>
		/// <returns>The result</returns>
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAQLVisitor<TResult> typedVisitor = visitor as IRAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber_array(this);
			else return visitor.VisitChildren(this);
		}
	}

	/// <summary>
	/// Numbers the array
	/// </summary>
	/// <returns>The localctx</returns>
	[RuleVersion(0)]
	public Number_arrayContext number_array() {
		Number_arrayContext _localctx = new Number_arrayContext(Context, State);
		EnterRule(_localctx, 38, RULE_number_array);
		int _la;
		try {
			State = 154;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 141;
				Match(T__3);
				State = 142;
				number();
				State = 147;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__4) {
					{
					{
					State = 143;
					Match(T__4);
					State = 144;
					number();
					}
					}
					State = 149;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 150;
				Match(T__5);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 152;
				Match(T__3);
				State = 153;
				Match(T__5);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	/// <summary>
	/// The bool context class
	/// </summary>
	/// <seealso cref="ParserRuleContext"/>
	public partial class BoolContext : ParserRuleContext {
		/// <summary>
		/// Booleans this instance
		/// </summary>
		/// <returns>The terminal node</returns>
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(RAQLParser.BOOLEAN, 0); }
		/// <summary>
		/// Initializes a new instance of the <see cref="BoolContext"/> class
		/// </summary>
		/// <param name="parent">The parent</param>
		/// <param name="invokingState">The invoking state</param>
		public BoolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		/// <summary>
		/// Gets the value of the rule index
		/// </summary>
		public override int RuleIndex { get { return RULE_bool; } }
		/// <summary>
		/// Accepts the visitor
		/// </summary>
		/// <typeparam name="TResult">The result</typeparam>
		/// <param name="visitor">The visitor</param>
		/// <returns>The result</returns>
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAQLVisitor<TResult> typedVisitor = visitor as IRAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool(this);
			else return visitor.VisitChildren(this);
		}
	}

	/// <summary>
	/// Bools this instance
	/// </summary>
	/// <returns>The localctx</returns>
	[RuleVersion(0)]
	public BoolContext @bool() {
		BoolContext _localctx = new BoolContext(Context, State);
		EnterRule(_localctx, 40, RULE_bool);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			Match(BOOLEAN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	/// <summary>
	/// The bool arraycontext class
	/// </summary>
	/// <seealso cref="ParserRuleContext"/>
	public partial class Bool_arrayContext : ParserRuleContext {
		/// <summary>
		/// Bools this instance
		/// </summary>
		/// <returns>The bool context array</returns>
		[System.Diagnostics.DebuggerNonUserCode] public BoolContext[] @bool() {
			return GetRuleContexts<BoolContext>();
		}
		/// <summary>
		/// Bools the i
		/// </summary>
		/// <param name="i">The </param>
		/// <returns>The bool context</returns>
		[System.Diagnostics.DebuggerNonUserCode] public BoolContext @bool(int i) {
			return GetRuleContext<BoolContext>(i);
		}
		/// <summary>
		/// Initializes a new instance of the <see cref="Bool_arrayContext"/> class
		/// </summary>
		/// <param name="parent">The parent</param>
		/// <param name="invokingState">The invoking state</param>
		public Bool_arrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		/// <summary>
		/// Gets the value of the rule index
		/// </summary>
		public override int RuleIndex { get { return RULE_bool_array; } }
		/// <summary>
		/// Accepts the visitor
		/// </summary>
		/// <typeparam name="TResult">The result</typeparam>
		/// <param name="visitor">The visitor</param>
		/// <returns>The result</returns>
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAQLVisitor<TResult> typedVisitor = visitor as IRAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool_array(this);
			else return visitor.VisitChildren(this);
		}
	}

	/// <summary>
	/// Bools the array
	/// </summary>
	/// <returns>The localctx</returns>
	[RuleVersion(0)]
	public Bool_arrayContext bool_array() {
		Bool_arrayContext _localctx = new Bool_arrayContext(Context, State);
		EnterRule(_localctx, 42, RULE_bool_array);
		int _la;
		try {
			State = 171;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 158;
				Match(T__3);
				State = 159;
				@bool();
				State = 164;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__4) {
					{
					{
					State = 160;
					Match(T__4);
					State = 161;
					@bool();
					}
					}
					State = 166;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 167;
				Match(T__5);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 169;
				Match(T__3);
				State = 170;
				Match(T__5);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	/// <summary>
	/// Sempreds the  localctx
	/// </summary>
	/// <param name="_localctx">The localctx</param>
	/// <param name="ruleIndex">The rule index</param>
	/// <param name="predIndex">The pred index</param>
	/// <returns>The bool</returns>
	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return clause_sempred((ClauseContext)_localctx, predIndex);
		}
		return true;
	}
	/// <summary>
	/// Clauses the sempred using the specified  localctx
	/// </summary>
	/// <param name="_localctx">The localctx</param>
	/// <param name="predIndex">The pred index</param>
	/// <returns>The bool</returns>
	private bool clause_sempred(ClauseContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}

	/// <summary>
	/// The serialized atn
	/// </summary>
	private static int[] _serializedATN = {
		4,1,16,174,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		1,0,1,0,1,0,1,1,1,1,1,1,1,1,3,1,52,8,1,1,1,1,1,3,1,56,8,1,1,1,1,1,3,1,
		60,8,1,1,1,1,1,1,1,1,1,5,1,66,8,1,10,1,12,1,69,9,1,1,2,1,2,1,3,1,3,1,3,
		1,3,1,3,1,3,3,3,79,8,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,
		1,7,1,7,1,8,1,8,1,8,1,8,3,8,99,8,8,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,
		11,1,12,1,12,1,12,1,12,1,13,1,13,1,14,5,14,116,8,14,10,14,12,14,119,9,
		14,1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,17,5,17,129,8,17,10,17,12,17,132,
		9,17,1,17,1,17,1,17,1,17,3,17,138,8,17,1,18,1,18,1,19,1,19,1,19,1,19,5,
		19,146,8,19,10,19,12,19,149,9,19,1,19,1,19,1,19,1,19,3,19,155,8,19,1,20,
		1,20,1,21,1,21,1,21,1,21,5,21,163,8,21,10,21,12,21,166,9,21,1,21,1,21,
		1,21,1,21,3,21,172,8,21,1,21,0,1,2,22,0,2,4,6,8,10,12,14,16,18,20,22,24,
		26,28,30,32,34,36,38,40,42,0,2,1,0,8,9,2,0,8,8,10,10,168,0,44,1,0,0,0,
		2,59,1,0,0,0,4,70,1,0,0,0,6,78,1,0,0,0,8,80,1,0,0,0,10,84,1,0,0,0,12,88,
		1,0,0,0,14,92,1,0,0,0,16,94,1,0,0,0,18,100,1,0,0,0,20,102,1,0,0,0,22,106,
		1,0,0,0,24,108,1,0,0,0,26,112,1,0,0,0,28,117,1,0,0,0,30,120,1,0,0,0,32,
		122,1,0,0,0,34,137,1,0,0,0,36,139,1,0,0,0,38,154,1,0,0,0,40,156,1,0,0,
		0,42,171,1,0,0,0,44,45,3,2,1,0,45,46,5,0,0,1,46,1,1,0,0,0,47,48,6,1,-1,
		0,48,60,3,6,3,0,49,51,5,1,0,0,50,52,5,2,0,0,51,50,1,0,0,0,51,52,1,0,0,
		0,52,53,1,0,0,0,53,55,3,2,1,0,54,56,5,2,0,0,55,54,1,0,0,0,55,56,1,0,0,
		0,56,57,1,0,0,0,57,58,5,3,0,0,58,60,1,0,0,0,59,47,1,0,0,0,59,49,1,0,0,
		0,60,67,1,0,0,0,61,62,10,1,0,0,62,63,3,4,2,0,63,64,3,2,1,2,64,66,1,0,0,
		0,65,61,1,0,0,0,66,69,1,0,0,0,67,65,1,0,0,0,67,68,1,0,0,0,68,3,1,0,0,0,
		69,67,1,0,0,0,70,71,5,11,0,0,71,5,1,0,0,0,72,79,3,12,6,0,73,79,3,10,5,
		0,74,79,3,8,4,0,75,79,3,24,12,0,76,79,3,20,10,0,77,79,3,16,8,0,78,72,1,
		0,0,0,78,73,1,0,0,0,78,74,1,0,0,0,78,75,1,0,0,0,78,76,1,0,0,0,78,77,1,
		0,0,0,79,7,1,0,0,0,80,81,3,28,14,0,81,82,3,14,7,0,82,83,3,34,17,0,83,9,
		1,0,0,0,84,85,3,28,14,0,85,86,3,14,7,0,86,87,3,38,19,0,87,11,1,0,0,0,88,
		89,3,28,14,0,89,90,3,14,7,0,90,91,3,42,21,0,91,13,1,0,0,0,92,93,5,7,0,
		0,93,15,1,0,0,0,94,95,3,28,14,0,95,98,3,18,9,0,96,99,3,32,16,0,97,99,3,
		30,15,0,98,96,1,0,0,0,98,97,1,0,0,0,99,17,1,0,0,0,100,101,7,0,0,0,101,
		19,1,0,0,0,102,103,3,28,14,0,103,104,3,22,11,0,104,105,3,36,18,0,105,21,
		1,0,0,0,106,107,7,1,0,0,107,23,1,0,0,0,108,109,3,28,14,0,109,110,3,26,
		13,0,110,111,3,40,20,0,111,25,1,0,0,0,112,113,5,8,0,0,113,27,1,0,0,0,114,
		116,5,13,0,0,115,114,1,0,0,0,116,119,1,0,0,0,117,115,1,0,0,0,117,118,1,
		0,0,0,118,29,1,0,0,0,119,117,1,0,0,0,120,121,5,16,0,0,121,31,1,0,0,0,122,
		123,5,14,0,0,123,33,1,0,0,0,124,125,5,4,0,0,125,130,3,32,16,0,126,127,
		5,5,0,0,127,129,3,32,16,0,128,126,1,0,0,0,129,132,1,0,0,0,130,128,1,0,
		0,0,130,131,1,0,0,0,131,133,1,0,0,0,132,130,1,0,0,0,133,134,5,6,0,0,134,
		138,1,0,0,0,135,136,5,4,0,0,136,138,5,6,0,0,137,124,1,0,0,0,137,135,1,
		0,0,0,138,35,1,0,0,0,139,140,5,12,0,0,140,37,1,0,0,0,141,142,5,4,0,0,142,
		147,3,36,18,0,143,144,5,5,0,0,144,146,3,36,18,0,145,143,1,0,0,0,146,149,
		1,0,0,0,147,145,1,0,0,0,147,148,1,0,0,0,148,150,1,0,0,0,149,147,1,0,0,
		0,150,151,5,6,0,0,151,155,1,0,0,0,152,153,5,4,0,0,153,155,5,6,0,0,154,
		141,1,0,0,0,154,152,1,0,0,0,155,39,1,0,0,0,156,157,5,15,0,0,157,41,1,0,
		0,0,158,159,5,4,0,0,159,164,3,40,20,0,160,161,5,5,0,0,161,163,3,40,20,
		0,162,160,1,0,0,0,163,166,1,0,0,0,164,162,1,0,0,0,164,165,1,0,0,0,165,
		167,1,0,0,0,166,164,1,0,0,0,167,168,5,6,0,0,168,172,1,0,0,0,169,170,5,
		4,0,0,170,172,5,6,0,0,171,158,1,0,0,0,171,169,1,0,0,0,172,43,1,0,0,0,13,
		51,55,59,67,78,98,117,130,137,147,154,164,171
	};

	/// <summary>
	/// The serialized atn
	/// </summary>
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
